import streamlit as st
import pandas as pd
import plotly.express as px
import json
import os
import re
from datetime import datetime
import glob
from together import Together
from dotenv import load_dotenv

# Charger les variables d'environnement depuis le fichier .env
load_dotenv()

# Initialiser le client Together avec la cl√© API depuis les variables d'environnement
client = Together(api_key=os.getenv("TOGETHER_API_KEY"))
MODEL = "meta-llama/Llama-3.3-70B-Instruct-Turbo-Free"

# Configuration de l'application
st.set_page_config(
    page_title="TAFAHOM - Agent Financier",
    page_icon="üíº",
    layout="wide",
)

# Initialisation de l'√©tat de la session
if "conversation_id" not in st.session_state:
    st.session_state.conversation_id = None

if "profile_data" not in st.session_state:
    st.session_state.profile_data = None

if "current_step" not in st.session_state:
    st.session_state.current_step = "introduction"  # √âtapes: "introduction", "review", "questions", "summary"

if "financier_responses" not in st.session_state:
    st.session_state.financier_responses = {}

if "evaluation_summary" not in st.session_state:
    st.session_state.evaluation_summary = None

if "contextualized_questions" not in st.session_state:
    st.session_state.contextualized_questions = None

# Crit√®res d'√©valuation pour le financier
EVALUATION_CRITERIA = [
    "Capital culturel incorpor√©",
    "Capital objectiv√©",
    "Capital institutionnalis√©", 
    "Capital symbolique reconnu",
    "Alignement narratif interpr√©tatif",
    "Ancrage territorial / communautaire",
    "Capacit√© de projection identitaire",
    "Soutien socio-culturel mobilisable",
    "Usage social du projet artistique",
    "Continuit√© d'engagement culturel"
]

# Questions de base (qui seront contextualis√©es)
BASE_QUESTIONS = [
    "En analysant le savoir-faire transmis, pensez-vous que ce capital culturel incorpor√© repr√©sente un atout √©conomique viable?",
    "Ces productions tangibles (≈ìuvres, spectacles, enregistrements) vous semblent-elles suffisamment valorisables sur le march√©?",
    "Les reconnaissances formelles ou distinctions mentionn√©es constituent-elles des garanties cr√©dibles pour une institution financi√®re?",
    "La notori√©t√© et la r√©putation locale du porteur repr√©sentent-elles une forme de garantie morale pour un financement?",
    "La coh√©rence du r√©cit et la capacit√© du porteur √† formuler son projet sont-elles suffisantes pour assurer sa viabilit√©?",
    "L'ancrage territorial du porteur peut-il constituer un atout commercial et une garantie de stabilit√© pour ce projet?",
    "La vision de d√©veloppement pr√©sent√©e vous para√Æt-elle r√©aliste et compatible avec nos contraintes de financement?",
    "Les r√©seaux et soutiens mentionn√©s pourraient-ils jouer le r√¥le de garants implicites en cas de difficult√©?",
    "L'impact social et culturel de ce projet peut-il √™tre converti en valeur ajout√©e √©conomique ou en notori√©t√© positive?",
    "L'engagement et la pers√©v√©rance du porteur compensent-ils d'√©ventuelles faiblesses dans son mod√®le √©conomique?"
]

# Fonction pour charger le profil de l'artiste
def load_artist_profile(conversation_id):
    try:
        # Chercher le fichier correspondant √† l'ID de conversation
        profile_file = f"tafahom_profil_{conversation_id}.json"
        
        if os.path.exists(profile_file):
            with open(profile_file, "r", encoding="utf-8") as f:
                profile_data = json.load(f)
            return profile_data
        else:
            available_profiles = glob.glob("tafahom_profil_*.json")
            if available_profiles:
                return None, [os.path.basename(f).replace("tafahom_profil_", "").replace(".json", "") for f in available_profiles]
            else:
                return None, []
    except Exception as e:
        st.error(f"Erreur lors du chargement du profil: {e}")
        return None, []

# Fonction pour contextualiser les questions en fonction du profil
def contextualize_questions(profile_data):
    try:
        # Syst√®me prompt pour la contextualisation
        system_prompt = """Tu es TAFAHOM-AGENT, un syst√®me qui contextualise des questions d'√©valuation financi√®re √† partir d'un profil artistique.

üéØ Objectif principal :
Pour chaque crit√®re et sa question associ√©e, tu dois:
1. Extraire les informations pertinentes du profil artiste li√©es √† ce crit√®re
2. Pr√©senter ces informations de mani√®re concise et factuelle
3. Reformuler la question de base pour qu'elle soit directement li√©e au contenu du profil

Format de sortie pour chaque question:
```
{
  "questions": [
    {
      "criterion": "Nom du crit√®re",
      "context": "Pr√©sentation factuelle des √©l√©ments du profil li√©s √† ce crit√®re (3-4 phrases)",
      "question": "Question reformul√©e et contextualis√©e"
    },
    ...
  ]
}
```

Note: La pr√©sentation des √©l√©ments du profil doit √™tre objective et factuelle, tandis que la question doit inviter √† l'analyse financi√®re.
"""
        
        # Pr√©parer le contexte du profil
        profile_context = json.dumps(profile_data, ensure_ascii=False, indent=2)
        
        # Pr√©parer les crit√®res et questions
        criteria_questions = []
        for i, (criterion, question) in enumerate(zip(EVALUATION_CRITERIA, BASE_QUESTIONS)):
            criteria_questions.append({"criterion": criterion, "base_question": question})
        
        criteria_context = json.dumps(criteria_questions, ensure_ascii=False, indent=2)
        
        # Construire le message pour le mod√®le
        messages = [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": f"Voici le profil d'un porteur de projet culturel:\n\n{profile_context}\n\nEt voici les crit√®res et questions de base pour l'√©valuation financi√®re:\n\n{criteria_context}\n\nContextualise chaque question en pr√©sentant d'abord les √©l√©ments pertinents du profil puis en posant la question adapt√©e. Retourne uniquement le JSON structur√©."}
        ]
        
        # Appeler l'API
        response = client.chat.completions.create(
            model=MODEL,
            messages=messages,
            temperature=0.5,
            max_tokens=2500,
            top_p=0.9
        )
        
        response_text = response.choices[0].message.content
        
        # Extraire le JSON
        json_match = re.search(r'```(?:json)?\s*(.*?)\s*```', response_text, re.DOTALL)
        if json_match:
            json_str = json_match.group(1)
        else:
            json_str = re.search(r'({.*})', response_text, re.DOTALL).group(1)
        
        # Parser le JSON
        contextualized_questions = json.loads(json_str)
        
        return contextualized_questions
    
    except Exception as e:
        st.error(f"Erreur lors de la contextualisation des questions: {e}")
        
        # En cas d'√©chec, cr√©er une version par d√©faut
        default_questions = {"questions": []}
        for i, (criterion, question) in enumerate(zip(EVALUATION_CRITERIA, BASE_QUESTIONS)):
            default_questions["questions"].append({
                "criterion": criterion,
                "context": f"√âvaluez le porteur sur son {criterion}.",
                "question": question
            })
        
        return default_questions

# Fonction pour g√©n√©rer l'√©valuation finale
def generate_final_evaluation(profile_data, financier_responses):
    try:
        # Syst√®me prompt pour l'√©valuation finale
        system_prompt = """Tu es TAFAHOM-AGENT, un agent conversationnel charg√© de g√©n√©rer une √©valuation finale bas√©e sur les r√©ponses d'un agent financier humain.

üéØ Objectif principal :
Produire une √©valuation compl√®te d'un porteur de projet culturel, bas√©e sur l'analyse de l'agent financier.

Ta t√¢che est de produire :
1. Une √©valuation d√©taill√©e pour chacun des 10 crit√®res (note /10 + commentaire)
2. Un score global de recevabilit√© financi√®re (sur 100)
3. Une recommandation finale (acceptation, acceptation conditionnelle, rejet)
4. Des conditions ou recommandations pr√©cises pour am√©liorer la recevabilit√©

Format de l'√©valuation √† g√©n√©rer:
```
{
  "evaluation": {
    "criteria": [
      {
        "name": "Capital culturel incorpor√©",
        "score": X,
        "comment": "Commentaire bas√© sur l'avis de l'agent financier"
      },
      ...
    ],
    "global_score": XX,
    "decision": "Acceptation conditionnelle", // Ou "Acceptation" ou "Rejet"
    "recommendations": ["Recommandation 1", "Recommandation 2", ...],
    "summary": "Synth√®se globale de l'√©valuation"
  }
}
```

Ton √©valuation doit √™tre √©quilibr√©e, reconnaissant √† la fois les forces symboliques et les garanties financi√®res, tout en respectant fid√®lement l'avis exprim√© par l'agent financier.
"""
        
        # Pr√©parer le contexte du profil
        profile_context = json.dumps(profile_data, ensure_ascii=False, indent=2)
        
        # Pr√©parer les r√©ponses du financier
        responses_context = json.dumps(financier_responses, ensure_ascii=False, indent=2)
        
        # Construire le message pour le mod√®le
        messages = [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": f"Voici le profil d'un porteur de projet culturel:\n\n{profile_context}\n\nEt voici les r√©ponses de l'agent financier √† des questions sp√©cifiques sur ce profil:\n\n{responses_context}\n\nG√©n√®re maintenant une √©valuation finale compl√®te avec les 10 crit√®res d'√©valuation, un score global, une d√©cision et des recommandations. Retourne uniquement le JSON structur√©."}
        ]
        
        # Appeler l'API
        response = client.chat.completions.create(
            model=MODEL,
            messages=messages,
            temperature=0.5,
            max_tokens=2000,
            top_p=0.9
        )
        
        response_text = response.choices[0].message.content
        
        # Extraire le JSON
        json_match = re.search(r'```(?:json)?\s*(.*?)\s*```', response_text, re.DOTALL)
        if json_match:
            json_str = json_match.group(1)
        else:
            json_str = re.search(r'({.*})', response_text, re.DOTALL).group(1)
        
        # Parser le JSON
        evaluation_data = json.loads(json_str)
        
        return evaluation_data
    
    except Exception as e:
        st.error(f"Erreur lors de la g√©n√©ration de l'√©valuation finale: {e}")
        return None

# Fonction pour g√©n√©rer un profil artiste mis √† jour
def generate_updated_artist_profile(profile_data, evaluation_data):
    try:
        # Syst√®me prompt
        system_prompt = """Tu es TAFAHOM, un syst√®me qui g√©n√®re un profil mis √† jour pour un porteur de projet culturel en int√©grant les √©valuations d'un agent financier.

Ta t√¢che est de cr√©er un nouveau profil qui:
1. Conserve les informations originales sur le capital culturel et symbolique
2. Int√®gre les √©valuations de l'agent financier
3. Ajuste le score IAS en tenant compte des deux perspectives
4. Propose des recommandations d'am√©lioration sp√©cifiques

Format du profil √† g√©n√©rer:
```
{
  "profile": {
    "criteria": [
      {
        "name": "Nom du crit√®re",
        "score": X,
        "comment": "Commentaire mis √† jour",
        "financial_perspective": "Perspective financi√®re sur ce crit√®re"
      },
      ...
    ],
    "ias_score": XX,
    "financial_score": YY,
    "combined_score": ZZ,
    "improvement_areas": ["Am√©lioration 1", "Am√©lioration 2", ...],
    "summary": "Synth√®se globale du profil enrichi"
  }
}
```
"""
        
        # Pr√©parer le contexte
        profile_context = json.dumps(profile_data, ensure_ascii=False, indent=2)
        evaluation_context = json.dumps(evaluation_data, ensure_ascii=False, indent=2)
        
        # Construire le message
        messages = [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": f"Voici le profil original d'un porteur de projet culturel:\n\n{profile_context}\n\nEt voici l'√©valuation financi√®re de ce profil:\n\n{evaluation_context}\n\nG√©n√®re maintenant un profil enrichi qui int√®gre ces deux perspectives. Retourne uniquement le JSON structur√©."}
        ]
        
        # Appeler l'API
        response = client.chat.completions.create(
            model=MODEL,
            messages=messages,
            temperature=0.5,
            max_tokens=2000,
            top_p=0.9
        )
        
        response_text = response.choices[0].message.content
        
        # Extraire le JSON
        json_match = re.search(r'```(?:json)?\s*(.*?)\s*```', response_text, re.DOTALL)
        if json_match:
            json_str = json_match.group(1)
        else:
            json_str = re.search(r'({.*})', response_text, re.DOTALL).group(1)
        
        # Parser le JSON
        updated_profile = json.loads(json_str)
        
        return updated_profile
    
    except Exception as e:
        st.error(f"Erreur lors de la g√©n√©ration du profil mis √† jour: {e}")
        return None

# Interface principale
st.title("üíº TAFAHOM - Agent Financier")

# √âtape d'introduction
if st.session_state.current_step == "introduction":
    st.markdown("""
    ### Bienvenue sur TAFAHOM-Agent
    
    Cette interface vous permet, en tant qu'agent financier, d'√©valuer la recevabilit√© d'un projet culturel ou artistique.
    
    Le dispositif TAFAHOM facilite le dialogue entre les porteurs de projets culturels et les institutions financi√®res en traduisant le langage culturel en termes institutionnels.
    
    Pour commencer, veuillez charger le profil d'un porteur de projet g√©n√©r√© par TAFAHOM-Portail.
    """)
    
    # Chargement du profil
    st.subheader("Chargement du profil")
    
    # Option 1: ID de conversation
    col1, col2 = st.columns([2, 1])
    with col1:
        conversation_id = st.text_input("Entrez l'identifiant de la conversation TAFAHOM-Portail")
    
    with col2:
        if st.button("Charger le profil", key="load_profile"):
            if conversation_id:
                result = load_artist_profile(conversation_id)
                
                if isinstance(result, tuple):
                    _, available_ids = result
                    if available_ids:
                        st.error(f"Profil non trouv√©. Voici les profils disponibles: {', '.join(available_ids)}")
                    else:
                        st.error("Aucun profil disponible. Veuillez d'abord cr√©er un profil avec TAFAHOM-Portail.")
                else:
                    profile_data = result
                    if profile_data:
                        st.session_state.profile_data = profile_data
                        st.session_state.conversation_id = conversation_id
                        st.session_state.current_step = "review"
                        st.rerun()
                    else:
                        st.error(f"Profil non trouv√© pour l'ID {conversation_id}")
    
    # Option 2: Fichiers disponibles
    st.markdown("---")
    st.subheader("Ou s√©lectionnez un profil existant")
    
    # Recherche des fichiers de profil disponibles
    available_profiles = glob.glob("tafahom_profil_*.json")
    if available_profiles:
        profile_ids = [os.path.basename(f).replace("tafahom_profil_", "").replace(".json", "") for f in available_profiles]
        selected_id = st.selectbox("Profils disponibles", profile_ids)
        
        if st.button("Charger ce profil", key="load_selected"):
            result = load_artist_profile(selected_id)
            
            if isinstance(result, tuple):
                st.error("Erreur lors du chargement du profil.")
            else:
                profile_data = result
                if profile_data:
                    st.session_state.profile_data = profile_data
                    st.session_state.conversation_id = selected_id
                    st.session_state.current_step = "review"
                    st.rerun()
    else:
        st.info("Aucun profil disponible. Veuillez d'abord cr√©er un profil avec TAFAHOM-Portail.")

# √âtape de revue du profil
elif st.session_state.current_step == "review":
    profile = st.session_state.profile_data['profile']
    
    st.markdown(f"### √âvaluation du profil {st.session_state.conversation_id}")
    
    col1, col2 = st.columns([1, 2])
    
    with col1:
        # Score IAS du porteur
        st.metric("Score IAS du porteur", f"{profile['ias_score']}/100")
        
        # Jauge visuelle pour l'IAS
        fig = px.pie(
            values=[profile['ias_score'], 100-profile['ias_score']], 
            names=["Score", "Restant"],
            hole=0.7,
            color_discrete_sequence=["#4CAF50", "#F0F0F0"]
        )
        fig.update_layout(
            showlegend=False,
            annotations=[dict(text=f"{profile['ias_score']}%", x=0.5, y=0.5, font_size=20, showarrow=False)]
        )
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        st.markdown("### Synth√®se du profil artiste")
        st.markdown(profile['summary'])
    
    # Tableau des crit√®res de l'artiste
    st.markdown("### √âvaluation du porteur par TAFAHOM-Portail")
    
    # Convertir en DataFrame
    criteria_df = pd.DataFrame([
        {
            "Crit√®re": criterion["name"],
            "Score": criterion["score"],
            "√âvaluation": criterion["comment"]
        }
        for criterion in profile["criteria"]
    ])
    
    st.dataframe(
        criteria_df,
        column_config={
            "Crit√®re": st.column_config.TextColumn("Crit√®re"),
            "Score": st.column_config.ProgressColumn(
                "Score", 
                min_value=0,
                max_value=10,
                format="%d/10",
            ),
            "√âvaluation": st.column_config.TextColumn("√âvaluation"),
        },
        hide_index=True,
    )
    
    # Graphique radar pour visualiser les scores
    fig = px.line_polar(
        criteria_df, 
        r="Score", 
        theta="Crit√®re", 
        line_close=True,
        range_r=[0,10],
        color_discrete_sequence=["#4CAF50"]
    )
    fig.update_layout(
        polar=dict(
            radialaxis=dict(
                visible=True,
                range=[0, 10]
            )
        ),
        showlegend=False
    )
    st.plotly_chart(fig, use_container_width=True)
    
    # Bouton pour commencer l'√©valuation
    if st.button("Commencer l'√©valuation financi√®re"):
        # Contextualiser les questions
        with st.spinner("Pr√©paration des questions contextualis√©es..."):
            contextualized_questions = contextualize_questions(st.session_state.profile_data)
            if contextualized_questions:
                st.session_state.contextualized_questions = contextualized_questions
                st.session_state.current_step = "questions"
                st.rerun()
            else:
                st.error("Impossible de contextualiser les questions. Veuillez r√©essayer.")

# √âtape des questions
elif st.session_state.current_step == "questions":
    st.markdown("### √âvaluation financi√®re")
    st.markdown("Veuillez r√©pondre aux questions suivantes pour √©valuer la recevabilit√© du projet:")
    
    if not st.session_state.contextualized_questions:
        st.error("Questions contextualis√©es non disponibles. Retournez √† l'√©tape pr√©c√©dente.")
        if st.button("Retour"):
            st.session_state.current_step = "review"
            st.rerun()
    else:
        # Cr√©er un formulaire pour toutes les questions
        with st.form("evaluation_form"):
            for i, q_data in enumerate(st.session_state.contextualized_questions["questions"]):
                criterion = q_data["criterion"]
                context = q_data["context"]
                question = q_data["question"]
                
                st.markdown(f"#### {i+1}. {criterion}")
                
                # Afficher le contexte du profil
                st.info(context)
                
                # Afficher la question
                st.markdown(f"**Question**: {question}")
                
                # Input text pour la r√©ponse de l'agent financier
                response_key = f"question_{i}"
                default_value = st.session_state.financier_responses.get(response_key, "")
                response = st.text_area(f"Votre analyse (Crit√®re {i+1})", value=default_value, height=100, key=f"response_{i}")
                
                # Slider pour la note
                score_key = f"score_{i}"
                default_score = st.session_state.financier_responses.get(score_key, 5)
                score = st.slider(f"Note pour {criterion}", 0, 10, default_score, key=f"score_{i}")
                
                # Ajouter une s√©paration
                st.markdown("---")
                
                # Stocker les r√©ponses dans le state
                st.session_state.financier_responses[response_key] = response
                st.session_state.financier_responses[score_key] = score
            
            # Bouton de soumission
            submit_button = st.form_submit_button("Soumettre l'√©valuation")
            
            if submit_button:
                # V√©rifier que toutes les r√©ponses sont remplies
                all_filled = all(st.session_state.financier_responses.get(f"question_{i}") for i in range(len(EVALUATION_CRITERIA)))
                
                if all_filled:
                    st.session_state.current_step = "summary"
                    st.rerun()
                else:
                    st.error("Veuillez r√©pondre √† toutes les questions.")

# √âtape de r√©sum√© final
elif st.session_state.current_step == "summary":
    # G√©n√©rer l'√©valuation finale si elle n'existe pas
    if not st.session_state.evaluation_summary:
        with st.spinner("G√©n√©ration de l'√©valuation financi√®re..."):
            # Restructurer les r√©ponses du financier pour l'IA
            formatted_responses = {}
            for i, criterion in enumerate(EVALUATION_CRITERIA):
                formatted_responses[criterion] = {
                    "text": st.session_state.financier_responses.get(f"question_{i}", ""),
                    "score": st.session_state.financier_responses.get(f"score_{i}", 5),
                    "question_context": st.session_state.contextualized_questions["questions"][i]["context"],
                    "question": st.session_state.contextualized_questions["questions"][i]["question"]
                }
            
            # G√©n√©rer l'√©valuation
            evaluation_data = generate_final_evaluation(st.session_state.profile_data, formatted_responses)
            if evaluation_data:
                st.session_state.evaluation_summary = evaluation_data
            else:
                st.error("Impossible de g√©n√©rer l'√©valuation. Veuillez r√©essayer.")
                if st.button("Retour aux questions"):
                    st.session_state.current_step = "questions"
                    st.rerun()
    
    # Afficher l'√©valuation
    if st.session_state.evaluation_summary:
        evaluation = st.session_state.evaluation_summary['evaluation']
        
        st.markdown("### √âvaluation Financi√®re - Synth√®se")
        
        # Afficher le score global et la d√©cision
        col1, col2 = st.columns([1, 2])
        
        with col1:
            # Score de recevabilit√©
            st.metric("Score de recevabilit√©", f"{evaluation['global_score']}/100")
            
            # Jauge visuelle
            fig = px.pie(
                values=[evaluation['global_score'], 100-evaluation['global_score']], 
                names=["Score", "Restant"],
                hole=0.7,
                color_discrete_sequence=["#3366CC", "#F0F0F0"]
            )
            fig.update_layout(
                showlegend=False,
                annotations=[dict(text=f"{evaluation['global_score']}%", x=0.5, y=0.5, font_size=20, showarrow=False)]
            )
            st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            # D√©cision
            decision_color = "#4CAF50" if evaluation['decision'] == "Acceptation" else ("#FFA500" if evaluation['decision'] == "Acceptation conditionnelle" else "#FF5733")
            st.markdown(f"### D√©cision: <span style='color:{decision_color}'>{evaluation['decision']}</span>", unsafe_allow_html=True)
            
            # Synth√®se
            st.markdown("### Synth√®se")
            st.markdown(evaluation['summary'])
        
        # Recommandations
        st.markdown("### Recommandations")
        for i, rec in enumerate(evaluation['recommendations']):
            st.markdown(f"{i+1}. {rec}")
        
        # Tableau des crit√®res
        st.markdown("### √âvaluation d√©taill√©e")
        
        # Convertir en DataFrame
        eval_df = pd.DataFrame([
            {
                "Crit√®re": criterion["name"],
                "Score": criterion["score"],
                "√âvaluation": criterion["comment"]
            }
            for criterion in evaluation["criteria"]
        ])
        
        st.dataframe(
            eval_df,
            column_config={
                "Crit√®re": st.column_config.TextColumn("Crit√®re"),
                "Score": st.column_config.ProgressColumn(
                    "Score", 
                    min_value=0,
                    max_value=10,
                    format="%d/10",
                ),
                "√âvaluation": st.column_config.TextColumn("√âvaluation"),
            },
            hide_index=True,
        )
        
        # Graphique radar pour visualiser les scores
        fig = px.line_polar(
            eval_df, 
            r="Score", 
            theta="Crit√®re", 
            line_close=True,
            range_r=[0,10],
            color_discrete_sequence=["#3366CC"]
        )
        fig.update_layout(
            polar=dict(
                radialaxis=dict(
                    visible=True,
                    range=[0, 10]
                )
            ),
            showlegend=False
        )
        st.plotly_chart(fig, use_container_width=True)
        
        # Comparaison avec l'IAS
        st.markdown("### Comparaison IAS vs Recevabilit√© Financi√®re")
        
        artist_ias = st.session_state.profile_data['profile']['ias_score']
        agent_score = evaluation['global_score']
        
        # Graphique de comparaison
        comparison_df = pd.DataFrame([
            {"Type": "IAS (Symbolique)", "Score": artist_ias, "Color": "#4CAF50"},
            {"Type": "Recevabilit√© (Financi√®re)", "Score": agent_score, "Color": "#3366CC"}
        ])
        
        fig = px.bar(
            comparison_df,
            x="Type",
            y="Score",
            color="Type",
            color_discrete_map={"IAS (Symbolique)": "#4CAF50", "Recevabilit√© (Financi√®re)": "#3366CC"},
            text="Score",
            height=400
        )
        fig.update_layout(
            yaxis_range=[0, 100],
            yaxis_title="Score /100",
            xaxis_title="",
            showlegend=False
        )
        st.plotly_chart(fig, use_container_width=True)
        
        # Bouton pour g√©n√©rer un profil artiste mis √† jour
        if st.button("G√©n√©rer un profil artiste enrichi"):
            with st.spinner("G√©n√©ration du profil enrichi..."):
                updated_profile = generate_updated_artist_profile(
                    st.session_state.profile_data,
                    st.session_state.evaluation_summary
                )
                
                if updated_profile:
                    # Sauvegarder le profil mis √† jour
                    updated_file = f"tafahom_profil_enrichi_{st.session_state.conversation_id}.json"
                    with open(updated_file, "w", encoding="utf-8") as f:
                        json.dump(updated_profile, f, ensure_ascii=False, indent=2)
                    
                    st.success(f"‚úÖ Profil enrichi g√©n√©r√© et sauvegard√© sous: {updated_file}")
                    
                    # Proposer le t√©l√©chargement
                    with open(updated_file, "r", encoding="utf-8") as f:
                        st.download_button(
                            "T√©l√©charger le profil enrichi",
                            f.read(),
                            file_name=updated_file,
                            mime="application/json"
                        )
                    
                    # Afficher le profil enrichi
                    st.markdown("### Profil Artiste Enrichi")
                    
                    enriched_profile = updated_profile['profile']
                    
                    # Afficher les scores
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.metric("Score IAS (Symbolique)", f"{enriched_profile['ias_score']}/100")
                    with col2:
                        st.metric("Score Financier", f"{enriched_profile['financial_score']}/100")
                    with col3:
                        st.metric("Score Combin√©", f"{enriched_profile['combined_score']}/100")
                    
                    # Afficher la synth√®se
                    st.markdown("### Synth√®se du profil enrichi")
                    st.markdown(enriched_profile['summary'])
                    
                    # Afficher les axes d'am√©lioration
                    st.markdown("### Axes d'am√©lioration")
                    for i, area in enumerate(enriched_profile['improvement_areas']):
                        st.markdown(f"{i+1}. {area}")
                    
                    # Tableau des crit√®res enrichis
                    st.markdown("### √âvaluation compl√®te")
                    
                    # Convertir en DataFrame
                    enriched_df = pd.DataFrame([
                        {
                            "Crit√®re": criterion["name"],
                            "Score": criterion["score"],
                            "√âvaluation": criterion["comment"],
                            "Perspective financi√®re": criterion.get("financial_perspective", "")
                        }
                        for criterion in enriched_profile["criteria"]
                    ])
                    
                    st.dataframe(
                        enriched_df,
                        column_config={
                            "Crit√®re": st.column_config.TextColumn("Crit√®re"),
                            "Score": st.column_config.ProgressColumn(
                                "Score", 
                                min_value=0,
                                max_value=10,
                                format="%d/10",
                            ),
                            "√âvaluation": st.column_config.TextColumn("√âvaluation symbolique"),
                            "Perspective financi√®re": st.column_config.TextColumn("Perspective financi√®re"),
                        },
                        hide_index=True,
                    )
                else:
                    st.error("Impossible de g√©n√©rer le profil enrichi. Veuillez r√©essayer.")
        
        # Bouton pour √©valuer un nouveau profil
        if st.button("√âvaluer un nouveau profil"):
            # R√©initialiser l'√©tat de la session
            for key in list(st.session_state.keys()):
                del st.session_state[key]
            
            # R√©initialiser les variables de session
            st.session_state.conversation_id = None
            st.session_state.profile_data = None
            st.session_state.current_step = "introduction"
            st.session_state.financier_responses = {}
            st.session_state.evaluation_summary = None
            st.session_state.contextualized_questions = None
            
            st.rerun()

# Sidebar avec informations et options
with st.sidebar:
    st.subheader("√Ä propos de TAFAHOM")
    
    st.markdown("""
    ### Le projet TAFAHOM
    
    TAFAHOM est un dispositif qui facilite le dialogue entre porteurs de projets culturels et institutions financi√®res.
    
    Le dispositif repose sur la th√©orie du capital culturel et symbolique de Bourdieu, adapt√©e aux enjeux de la microfinance culturelle.
    
    Les 10 crit√®res d'√©valuation couvrent √† la fois les dimensions symboliques et √©conomiques du projet, permettant une √©valuation plus nuanc√©e des projets atypiques.
    
    ### Processus d'√©valuation
    
    1. **Profil Symbolique**: G√©n√©r√© par TAFAHOM-Portail
    2. **√âvaluation Financi√®re**: R√©alis√©e par TAFAHOM-Agent
    3. **Profil Enrichi**: Combinant dimensions symboliques et financi√®res
    
    ### Capital Culturel et Symbolique
    
    - **Capital culturel incorpor√©**: Savoir-faire, comp√©tences acquises
    - **Capital objectiv√©**: Productions tangibles (≈ìuvres, performances)
    - **Capital institutionnalis√©**: Reconnaissances formelles (dipl√¥mes, prix)
    - **Capital symbolique**: Notori√©t√©, r√©putation, reconnaissance
    """)
    
    # Version de l'application
    st.markdown("---")
    st.caption("TAFAHOM - Version 1.0")
    st.caption("D√©velopp√© dans le cadre du projet de recherche sur le capital culturel et symbolique")