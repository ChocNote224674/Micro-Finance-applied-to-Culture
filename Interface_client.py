import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import plotly.express as px
import json
import os
import re
from datetime import datetime
import tempfile
from PIL import Image
from together import Together
import os
from dotenv import load_dotenv

# Charger les variables d'environnement depuis le fichier .env
load_dotenv()

# Initialiser le client Together avec la cl√© API depuis les variables d'environnement
client = Together(api_key=os.getenv("TOGETHER_API_KEY")) # Remplacer par votre cl√© API
MODEL = "meta-llama/Llama-3.3-70B-Instruct-Turbo-Free"

# Titre et description de l'application
st.set_page_config(
    page_title="TAFAHOM - Portail Artiste",
    page_icon="üé≠",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Initialisation de l'√©tat de la session
if "messages" not in st.session_state:
    st.session_state.messages = []

if "conversation_id" not in st.session_state:
    st.session_state.conversation_id = datetime.now().strftime("%Y%m%d%H%M%S")

if "context_file" not in st.session_state:
    st.session_state.context_file = f"tafahom_portail_{st.session_state.conversation_id}.txt"
    # Cr√©er le fichier de contexte
    with open(st.session_state.context_file, "w", encoding="utf-8") as f:
        f.write("Conversation TAFAHOM-Portail - Artiste:\n\n")

if "questions_asked" not in st.session_state:
    st.session_state.questions_asked = []

if "current_step" not in st.session_state:
    st.session_state.current_step = "introduction"  # √âtapes: "introduction", "conversation", "profile"

if "conversation_ended" not in st.session_state:
    st.session_state.conversation_ended = False

if "ias_score" not in st.session_state:
    st.session_state.ias_score = None

if "profile_data" not in st.session_state:
    st.session_state.profile_data = {}

if "profile_generated" not in st.session_state:
    st.session_state.profile_generated = False

if "export_format" not in st.session_state:
    st.session_state.export_format = "json"

# Crit√®res d'√©valuation pour le profil bas√©s sur la th√©orie du capital culturel et symbolique
CRITERIA = [
    "Capital culturel incorpor√©",
    "Capital objectiv√©",
    "Capital institutionnalis√©", 
    "Capital symbolique reconnu",
    "Alignement narratif interpr√©tatif",
    "Ancrage territorial / communautaire",
    "Capacit√© de projection identitaire",
    "Soutien socio-culturel mobilisable",
    "Usage social du projet artistique",
    "Continuit√© d'engagement culturel"
]

# Questions √† poser (reformul√©es pour √™tre plus accessibles)
QUESTIONS = [
    "Comment avez-vous appris ce que vous faites aujourd'hui dans votre art ou votre pratique ?",
    "Est-ce que vous avez des objets, des ≈ìuvres, des enregistrements ou des traces concr√®tes de ce que vous faites ?",
    "Avez-vous d√©j√† √©t√© reconnu officiellement pour votre travail ? Par exemple : avez-vous re√ßu un prix, un dipl√¥me, ou √©t√© invit√© √† des √©v√©nements culturels ou religieux particuliers ?",
    "Est-ce que les gens autour de vous ‚Äî dans votre quartier, votre ville ou votre communaut√© ‚Äî vous connaissent ou vous consid√®rent comme une personne importante dans votre domaine ?",
    "Est-ce que vous avez un projet clair pour l'avenir ? Par exemple, quelque chose que vous aimeriez construire, d√©velopper ou transmettre avec votre art ?",
    "Y a-t-il des personnes ou des groupes qui vous soutiennent ou vous accompagnent dans ce que vous faites ? Cela peut √™tre une troupe, un mentor, une association, ou m√™me des proches.",
    "Est-ce que ce que vous faites a un impact sur les autres ? Par exemple : cela inspire, rassemble, transmet quelque chose autour de vous ?",
    "Est-ce que vous continuez √† faire ce que vous faites m√™me quand vous ne gagnez pas d'argent avec ? Est-ce que vous tenez √† cette activit√© malgr√© les difficult√©s ?",
    "Est-ce que vous avez des revenus li√©s √† votre art aujourd'hui ? De quelle mani√®re gagnez-vous de l'argent gr√¢ce √† votre activit√© ?",
    "Si demain une institution vous proposait un financement, que diriez-vous pour la convaincre que votre projet est recevable ?"
]

# Fonction pour mettre √† jour le fichier de contexte
def update_context_file(role, content):
    with open(st.session_state.context_file, "a", encoding="utf-8") as f:
        f.write(f"{role}: {content}\n\n")

# Fonction pour g√©n√©rer un profil √† partir de la conversation
def generate_profile():
    try:
        system_prompt = """Tu es un analyste sp√©cialis√© dans la traduction culturelle et l'√©valuation de projets artisanaux ou artistiques, bas√© sur la th√©orie du capital culturel et symbolique de Bourdieu (1979, 1997).

Tu dois analyser l'ensemble de la conversation et produire:
1. Une fiche de profil structur√©e √©valuant le porteur culturel sur 10 crit√®res sp√©cifiques
2. Un score global d'alignement symbolique (IAS) repr√©sentant sa recevabilit√© institutionnelle

Pour chaque crit√®re, tu dois:
- Attribuer une note de 1 √† 10
- Fournir un commentaire synth√©tique reformulant le langage de l'artiste en termes institutionnels
- Identifier les forces et les faiblesses cl√©s

Structure de la fiche √† g√©n√©rer:
```
{
  "profile": {
    "criteria": [
      {
        "name": "Capital culturel incorpor√©",
        "score": X,
        "comment": "Commentaire synth√©tique et reformul√© en langage institutionnel"
      },
      ...
    ],
    "ias_score": XX,
    "summary": "Synth√®se globale du profil"
  }
}
```

Les 10 crit√®res √† √©valuer sont:
1. Capital culturel incorpor√© - Ma√Ætrise empirique d'un savoir-faire artistique ou culturel transmis par immersion ou apprentissage informel.
2. Capital objectiv√© - Pr√©sence d'objets, productions ou r√©alisations tangibles (≈ìuvres, spectacles, vid√©os) repr√©sentant l'activit√© du porteur.
3. Capital institutionnalis√© - Existence de reconnaissances formelles : prix, dipl√¥mes, distinctions, affiliations professionnelles.
4. Capital symbolique reconnu - Niveau de reconnaissance par une communaut√©, un territoire, ou un public, ind√©pendamment des m√©dias officiels.
5. Alignement narratif interpr√©tatif - Capacit√© √† exprimer son parcours dans une logique lisible par un √©valuateur.
6. Ancrage territorial / communautaire - Lien avec un lieu culturellement actif, facteur de stabilit√©, d'impact et de visibilit√© locale.
7. Capacit√© de projection identitaire - Clart√© du projet de d√©veloppement artistique en tant que micro-entreprise.
8. Soutien socio-culturel mobilisable - R√©seaux sociaux, troupes, associations, mentors pouvant renforcer la recevabilit√© sociale.
9. Usage social du projet artistique - Capacit√© √† articuler son projet avec un usage social (transmission, animation, m√©diation).
10. Continuit√© d'engagement culturel - R√©silience symbolique : persistance du porteur dans son activit√©, m√™me sans retour √©conomique.

IMPORTANT: Tu dois imp√©rativement reformuler le langage de l'artiste en termes institutionnels tout en pr√©servant l'essence et la sp√©cificit√© de son discours.

Pour le score IAS global, calcule la moyenne des 10 crit√®res et multiplie par 10 pour obtenir un score sur 100.

Attention: Ce score n'est pas uniquement √©conomique, mais repr√©sente l'alignement symbolique entre le r√©cit du porteur et sa recevabilit√© institutionnelle.
"""
        
        # Pr√©parer les messages pour l'API
        messages = [{"role": "system", "content": system_prompt}]
        
        # Ajouter l'historique des messages
        for msg in st.session_state.messages:
            role = "assistant" if msg["role"] == "assistant" else "user"
            messages.append({"role": role, "content": msg["content"]})
        
        # Ajouter une instruction finale pour g√©n√©rer le profil
        messages.append({"role": "user", "content": "Maintenant, analyse notre conversation et g√©n√®re le profil complet avec l'√©valuation des 10 crit√®res et le score IAS global comme demand√©. Retourne uniquement le JSON structur√©."})
        
        # Appeler l'API Together.ai
        response = client.chat.completions.create(
            model=MODEL,
            messages=messages,
            temperature=0.3,
            max_tokens=2000,
            top_p=0.9
        )
        
        response_text = response.choices[0].message.content
        
        # Extraire le JSON du texte de la r√©ponse
        json_match = re.search(r'```json\s*(.*?)\s*```', response_text, re.DOTALL)
        if json_match:
            json_str = json_match.group(1)
        else:
            json_str = re.search(r'({.*})', response_text, re.DOTALL).group(1)
        
        # Nettoyer et parser le JSON
        profile_data = json.loads(json_str)
        
        # Calculer le score IAS si non fourni
        if "ias_score" not in profile_data["profile"]:
            scores = [criterion["score"] for criterion in profile_data["profile"]["criteria"]]
            profile_data["profile"]["ias_score"] = round(sum(scores) / len(scores) * 10)
        
        return profile_data
    except Exception as e:
        st.error(f"Erreur lors de la g√©n√©ration du profil: {str(e)}")
        return None

# Fonction pour obtenir la r√©ponse du mod√®le LLM
def get_llm_response(user_input, next_question=None):
    try:
        # Syst√®me prompt avec les instructions pour le chatbot
        system_message = {
            "role": "system", 
            "content": """Tu es TAFAHOM-PORTAIL, un agent conversationnel con√ßu pour interagir avec des porteurs de projet culturel ou artistique issus de l'√©conomie informelle.

üéØ Objectif principal :
Recueillir le r√©cit du porteur, ses intentions, ses ressources et son parcours afin de produire un profil culturel et √©conomique lisible par une institution financi√®re, en te basant sur la th√©orie du capital culturel et symbolique de Bourdieu.

Instructions conversationnelles :
- Sois bienveillant, empathique et curieux
- Pose des questions ouvertes pour encourager l'artiste √† d√©velopper son propos
- Reformule syst√©matiquement chaque r√©ponse dans un langage plus institutionnel tout en pr√©servant l'essence culturelle
- √âvite les jugements ou conseils pr√©matur√©s
- Adapte ton langage au niveau de formalit√© de l'artiste
- Sois patient et laisse l'artiste s'exprimer √† son rythme
- Approfondis les aspects li√©s √† la reconnaissance, au r√©seau, √† la responsabilit√© et √† l'autonomie

Th√®mes √† explorer :
- Capital culturel incorpor√© (acquisition des savoirs, transmission)
- Capital objectiv√© (≈ìuvres, productions tangibles)
- Capital institutionnalis√© (reconnaissances formelles, prix, dipl√¥mes)
- Capital symbolique reconnu (r√©putation, estime communautaire)
- Alignement narratif (coh√©rence du r√©cit, lisibilit√© institutionnelle)
- Ancrage territorial (lien √† une r√©gion, une communaut√©)
- Capacit√© de projection (vision future, d√©veloppement)
- Soutiens mobilisables (r√©seau, mentors, collectifs)
- Usage social de l'art (impact communautaire, transmission)
- Continuit√© d'engagement (motivation, pers√©v√©rance)

√Ä chaque r√©ponse, reformule dans un langage institutionnel en pr√©servant l'essence culturelle du r√©cit.
Exemple : "Je joue pour oublier mes malheurs" ‚Üí "Le porteur consid√®re sa pratique musicale comme un levier de r√©silience personnelle."

Ton style de communication doit √™tre :
- Chaleureux mais professionnel
- Curieux mais respectueux
- Adaptable au niveau de langage de l'interlocuteur
- Concis mais pr√©cis
- Encourageant la confiance et le partage

IMPORTANT : Tu dois poser UNE question √† la fois, attendre la r√©ponse, puis continuer.
Tu ne poses pas la m√™me question deux fois et tu adaptes ton questionnement en fonction des r√©ponses d√©j√† re√ßues.
"""
        }
        
        # Pr√©parer les messages pour l'API
        messages = [system_message]
        
        # Ajouter l'historique des messages
        for msg in st.session_state.messages:
            role = "assistant" if msg["role"] == "assistant" else "user"
            messages.append({"role": role, "content": msg["content"]})
        
        # Ajouter le message actuel de l'utilisateur
        messages.append({"role": "user", "content": user_input})
        
        # Si une question sp√©cifique doit √™tre pos√©e ensuite
        if next_question:
            messages.append({"role": "system", "content": f"Apr√®s avoir r√©pondu √† l'utilisateur, pose-lui la question suivante: {next_question}"})
        
        # Appeler l'API Together.ai
        response = client.chat.completions.create(
            model=MODEL,
            messages=messages,
            temperature=0.7,
            max_tokens=800,
            top_p=0.9
        )
        
        response_text = response.choices[0].message.content
        
        # V√©rifier si toutes les questions ont √©t√© pos√©es
        if len(st.session_state.questions_asked) >= len(QUESTIONS) and "conversation_ended" not in st.session_state:
            st.session_state.conversation_ended = True
        
        return response_text
    except Exception as e:
        st.error(f"Erreur avec l'API LLM: {str(e)}")
        return "D√©sol√©, j'ai rencontr√© un probl√®me technique. Pourriez-vous r√©essayer dans quelques instants ?"

# Fonction pour exporter le profil
def export_profile(profile_data, format="json"):
    try:
        if format == "json":
            return json.dumps(profile_data, indent=2, ensure_ascii=False)
        elif format == "csv":
            # Convertir en format CSV
            rows = []
            for criterion in profile_data["profile"]["criteria"]:
                rows.append({
                    "Crit√®re": criterion["name"],
                    "Score": criterion["score"],
                    "Commentaire": criterion["comment"]
                })
            df = pd.DataFrame(rows)
            return df.to_csv(index=False)
        elif format == "txt":
            # Convertir en format texte
            text = "PROFIL TAFAHOM\n\n"
            text += f"Score IAS global: {profile_data['profile']['ias_score']}/100\n\n"
            text += "CRIT√àRES:\n"
            for criterion in profile_data["profile"]["criteria"]:
                text += f"- {criterion['name']}: {criterion['score']}/10\n"
                text += f"  {criterion['comment']}\n\n"
            text += f"SYNTH√àSE:\n{profile_data['profile']['summary']}"
            return text
    except Exception as e:
        st.error(f"Erreur lors de l'exportation: {str(e)}")
        return None

# Interface utilisateur avec Streamlit
st.title("üé≠ TAFAHOM - Portail pour Artistes")

# Affichage des √©tapes en fonction de l'√©tape actuelle
if st.session_state.current_step == "introduction":
    st.markdown("""
    ### Bienvenue sur TAFAHOM-Portail
    
    Cet espace a √©t√© con√ßu pour vous √©couter et comprendre votre projet artistique ou culturel.
    
    Notre objectif est de traduire votre r√©cit en un langage compr√©hensible par les institutions financi√®res, 
    sans perdre la richesse de votre expression et la sp√©cificit√© de votre d√©marche.
    
    Au fil de la conversation, nous allons explorer ensemble :
    - Votre parcours artistique et culturel
    - Vos cr√©ations et r√©alisations
    - Votre reconnaissance locale et institutionnelle
    - Votre projet et vos aspirations
    - Vos soutiens et votre ancrage communautaire
    
    √Ä la fin du dialogue, nous g√©n√©rerons un profil qui pourra √™tre transmis √† des institutions de financement.
    """)
    
    # Bouton pour commencer
    if st.button("Commencer la conversation"):
        st.session_state.current_step = "conversation"
        
        # Message initial du chatbot
        initial_response = "Bonjour ! Je suis ravi de faire votre connaissance. Pour mieux comprendre votre d√©marche artistique, pourriez-vous me parler de vous et de votre pratique artistique ?"
        
        # Ajouter √† l'historique
        st.session_state.messages.append({"role": "assistant", "content": initial_response})
        update_context_file("assistant", initial_response)
        
        # Enregistrer la premi√®re question
        st.session_state.questions_asked.append(QUESTIONS[0])
        
        st.rerun()
        
elif st.session_state.current_step == "conversation":
    st.markdown("### Conversation avec TAFAHOM-Portail")
    
    # Affichage des messages pr√©c√©dents
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])
    
    # Si la conversation n'est pas termin√©e, permettre √† l'utilisateur de r√©pondre
    if not st.session_state.conversation_ended:
        if prompt := st.chat_input("Votre r√©ponse..."):
            # Afficher le message de l'utilisateur
            with st.chat_message("user"):
                st.markdown(prompt)
            
            # Ajouter le message de l'utilisateur √† l'historique
            st.session_state.messages.append({"role": "user", "content": prompt})
            update_context_file("user", prompt)
            
            # D√©terminer la prochaine question √† poser
            next_question = None
            if len(st.session_state.questions_asked) < len(QUESTIONS):
                next_index = len(st.session_state.questions_asked)
                next_question = QUESTIONS[next_index]
                st.session_state.questions_asked.append(next_question)
            
            # Obtenir la r√©ponse du mod√®le LLM
            with st.spinner("Je r√©fl√©chis √† ma r√©ponse..."):
                response = get_llm_response(prompt, next_question)
            
            # Afficher la r√©ponse
            with st.chat_message("assistant"):
                st.markdown(response)
            
            # Ajouter la r√©ponse √† l'historique
            st.session_state.messages.append({"role": "assistant", "content": response})
            update_context_file("assistant", response)
            
            # V√©rifier si toutes les questions ont √©t√© pos√©es
            if len(st.session_state.questions_asked) >= len(QUESTIONS):
                st.session_state.conversation_ended = True
                st.rerun()
    else:
        # Si la conversation est termin√©e, afficher un bouton pour g√©n√©rer le profil
        if not st.session_state.profile_generated:
            st.success("‚úÖ Nous avons couvert tous les aspects n√©cessaires pour comprendre votre projet. Merci pour vos r√©ponses.")
            if st.button("G√©n√©rer mon profil TAFAHOM"):
                with st.spinner("G√©n√©ration de votre profil symbolique en cours..."):
                    profile_data = generate_profile()
                    
                    if profile_data:
                        st.session_state.profile_data = profile_data
                        st.session_state.ias_score = profile_data["profile"]["ias_score"]
                        st.session_state.profile_generated = True
                        st.session_state.current_step = "profile"
                        st.rerun()
                    else:
                        st.error("Impossible de g√©n√©rer le profil. Veuillez r√©essayer.")
        else:
            # Rediriger vers l'√©tape du profil
            st.session_state.current_step = "profile"
            st.rerun()
            
elif st.session_state.current_step == "profile":
    st.markdown("### Votre Profil TAFAHOM")
    
    if st.session_state.profile_data:
        profile = st.session_state.profile_data["profile"]
        
        # Afficher le score IAS
        col1, col2 = st.columns([1, 2])
        with col1:
            st.metric("Score IAS Global", f"{profile['ias_score']}/100")
            
            # Afficher une jauge pour le score IAS
            fig = px.pie(
                values=[profile['ias_score'], 100-profile['ias_score']], 
                names=["Score", "Restant"],
                hole=0.7,
                color_discrete_sequence=["#4CAF50", "#F0F0F0"]
            )
            fig.update_layout(
                showlegend=False,
                annotations=[dict(text=f"{profile['ias_score']}%", x=0.5, y=0.5, font_size=20, showarrow=False)]
            )
            st.plotly_chart(fig, use_container_width=True)
            
        with col2:
            st.markdown("### Synth√®se")
            st.markdown(profile['summary'])
        
        # Afficher le tableau des crit√®res
        st.markdown("### √âvaluation d√©taill√©e")
        
        # Convertir en DataFrame pour un affichage plus propre
        criteria_df = pd.DataFrame([
            {
                "Crit√®re": criterion["name"],
                "Score": criterion["score"],
                "√âvaluation": criterion["comment"]
            }
            for criterion in profile["criteria"]
        ])
        
        st.dataframe(
            criteria_df,
            column_config={
                "Crit√®re": st.column_config.TextColumn("Crit√®re"),
                "Score": st.column_config.ProgressColumn(
                    "Score", 
                    min_value=0,
                    max_value=10,
                    format="%d/10",
                ),
                "√âvaluation": st.column_config.TextColumn("√âvaluation"),
            },
            hide_index=True,
        )
        
        # Graphique radar pour visualiser les scores
        fig = px.line_polar(
            criteria_df, 
            r="Score", 
            theta="Crit√®re", 
            line_close=True,
            range_r=[0,10],
            color_discrete_sequence=["#4CAF50"]
        )
        fig.update_layout(
            polar=dict(
                radialaxis=dict(
                    visible=True,
                    range=[0, 10]
                )
            ),
            showlegend=False
        )
        st.plotly_chart(fig, use_container_width=True)
        
        # Options d'exportation
        st.markdown("### Exportation du profil")
        
        col1, col2 = st.columns([2, 1])
        with col1:
            st.session_state.export_format = st.selectbox(
                "Format d'exportation",
                ["json", "csv", "txt"],
                index=["json", "csv", "txt"].index(st.session_state.export_format)
            )
        
        with col2:
            export_data = export_profile(st.session_state.profile_data, st.session_state.export_format)
            if export_data:
                st.download_button(
                    "T√©l√©charger le profil",
                    data=export_data,
                    file_name=f"tafahom_profil_{st.session_state.conversation_id}.{st.session_state.export_format}",
                    mime="text/plain"
                )
        
        # Bouton pour transf√©rer au TAFAHOM-Agent
        st.markdown("### Transfert vers TAFAHOM-Agent")
        st.markdown("""
        Vous pouvez maintenant transf√©rer ce profil au TAFAHOM-Agent qui simulera 
        l'√©valuation de votre projet par un agent d'institution financi√®re.
        """)
        
        if st.button("Transf√©rer au TAFAHOM-Agent"):
            # Enregistrer le profil dans un fichier pour le TAFAHOM-Agent
            export_file = f"tafahom_profil_{st.session_state.conversation_id}.json"
            with open(export_file, "w", encoding="utf-8") as f:
                json.dump(st.session_state.profile_data, f, ensure_ascii=False, indent=2)
            
            st.success(f"‚úÖ Profil enregistr√© et pr√™t √† √™tre transf√©r√© vers TAFAHOM-Agent.")
            st.markdown(f"""
            Pour transf√©rer votre profil, veuillez copier votre identifiant de conversation:
            ```
            {st.session_state.conversation_id}
            ```
            Et le coller dans l'interface TAFAHOM-Agent.
            """)
        
        # Option pour recommencer
        if st.button("Commencer une nouvelle conversation"):
            # R√©initialiser l'√©tat de la session
            for key in list(st.session_state.keys()):
                if key != "export_format":
                    del st.session_state[key]
            
            # R√©initialiser les variables de session
            st.session_state.messages = []
            st.session_state.conversation_id = datetime.now().strftime("%Y%m%d%H%M%S")
            st.session_state.context_file = f"tafahom_portail_{st.session_state.conversation_id}.txt"
            st.session_state.questions_asked = []
            st.session_state.current_step = "introduction"
            st.session_state.conversation_ended = False
            st.session_state.ias_score = None
            st.session_state.profile_data = {}
            st.session_state.profile_generated = False
            
            # Cr√©er un nouveau fichier de contexte
            with open(st.session_state.context_file, "w", encoding="utf-8") as f:
                f.write("Conversation TAFAHOM-Portail - Artiste:\n\n")
            
            st.rerun()
    else:
        st.error("Donn√©es de profil manquantes. Veuillez g√©n√©rer un profil.")
        if st.button("Retourner √† la conversation"):
            st.session_state.current_step = "conversation"
            st.rerun()

# Sidebar pour outils de d√©veloppement et options
with st.sidebar:
    st.subheader("Options")
    
    # Informations sur la conversation
    st.markdown(f"**ID de conversation**: `{st.session_state.conversation_id}`")
    st.markdown(f"**√âtape actuelle**: `{st.session_state.current_step}`")
    st.markdown(f"**Questions pos√©es**: `{len(st.session_state.questions_asked)}/{len(QUESTIONS)}`")
    
    # Afficher le fichier de contexte
    if st.checkbox("Afficher le fichier de contexte"):
        if os.path.exists(st.session_state.context_file):
            with open(st.session_state.context_file, "r", encoding="utf-8") as f:
                st.text_area("Contenu du fichier", f.read(), height=300)
    
    # T√©l√©charger le fichier de contexte
    if st.button("T√©l√©charger le fichier de contexte"):
        if os.path.exists(st.session_state.context_file):
            with open(st.session_state.context_file, "r", encoding="utf-8") as f:
                st.download_button(
                    label="T√©l√©charger",
                    data=f.read(),
                    file_name=st.session_state.context_file,
                    mime="text/plain"
                )
    
    # √Ä propos de TAFAHOM
    if st.checkbox("√Ä propos de TAFAHOM"):
        st.markdown("""
        ### √Ä propos du projet TAFAHOM
        
        Le dispositif TAFAHOM repose sur la th√©orie du capital culturel et symbolique de Bourdieu, adapt√©e √† l'√©valuation de micro-projets artistiques.
        
        L'objectif est de rendre audible un langage informel, sans le d√©naturer, pour faciliter le dialogue entre porteurs de projets culturels et institutions financi√®res.
        
        Le mod√®le valorise 10 dimensions cl√©s:
        1. Capital culturel incorpor√©
        2. Capital objectiv√©
        3. Capital institutionnalis√©
        4. Capital symbolique reconnu
        5. Alignement narratif
        6. Ancrage territorial
        7. Capacit√© de projection
        8. Soutien socio-culturel
        9. Usage social de l'art
        10. Continuit√© d'engagement
        
        L'Indice d'Alignement Symbolique (IAS) mesure la capacit√© du r√©cit √† √™tre re√ßu par les institutions, tout en pr√©servant l'authenticit√© du porteur.
        """)